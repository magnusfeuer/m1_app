// -*- c++ -*-
//
// All rights reserved. Reproduction, modification, use or disclosure
// to third parties without express authority is forbidden.
// Copyright Magden LLC, California, USA, 2004, 2005, 2006, 2007, 2008.
//

//
// Producer code that is triggered when a USB device is inserted.
// Also triggered during startup by all existing USB devices.
//
library ZT2ProdLib {
    //
    // An ADDevice with a number of AD channels.
    //
    type M1ZT2DeviceProd: DeviceHandlerProducer {
	:ADLib:Device collection[] = {};

	script trigger when action == "add" { 
	    printf("M1ZT2DeviceProd::add(%s): product[%s] serial[%s]\n",
		   devicePath, product, serial);
	    collection += @:ZT2Lib:M1ZT2Device { device = devicePath, serial=serial, product=product };
	}
	script trigger when action == "remove" {
	    :ADLib:Device ind;
	    :ADLib:Device del[] = {};

	    printf("M1ZT2DeviceProd::remove(%s): product[%s] serial[%s]\n",
		   devicePath, product, serial);

	    foreach ind in collection {
		if (ind.device == devicePath) {
		    printf("M1ZT2DeviceProd::remove(). Found it.\n");
		    del += ind;
		    ind.channels = {};
		}
	    }
	    collection -= del;
	    
	}
    };

    //
    // Register a producer with the core usb prodcucer.
    //
    .ADManager.usbManager.producers += @M1ZT2DeviceProd {
	productPattern="M1/ZT2", // This is really the only thing we need to trigger on.
	manufacturerPattern="",
	serialPattern="",
	vendorIDPattern=0,
	productIDPattern=0,
	collection = .ADManager.usbDevices
    };
}
